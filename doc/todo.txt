* Ability to set JPEG quality (and progression?).

* Implement more magic albums.

    - Hierarchy of categories.

      The categories example above would render this hierarchy if there
      is one image (Image1) that has categories "Ryd" and "Ulrik":

          [A] Platser
              [A] Sverige
                  [A] Linköping
                      [A] Lambohov
                      [A] Ryd
                          [I] Image1
                  [A] Ulricehamn
                  [A] Örebro

          [A] Personer
              [A] Epact
                  [A] Ulrik
                      [I] Image1
              [A] Vänner
                  [A] Björn
                  [A] Ulrik
                      [I] Image1

    - Chronological with day granularity.

          [A] Chronological
              [A] 2003
                  [A] March 2003
                      [A] 17 March 2003
                          [I] Image1
                      [A] 19 March 2003
                          [I] Image2

* Generate details page.

* Make it possible to generate an album with images symlinked to a
  local image store, not the system-wide cache.

* Two different generation modes: "local" and "symlink"? Generated
  HTML pages in the former mode would have absolute hrefs to the
  images in the imagecache and would be suitable for viewing with
  local web browser. Bonus: No need for symlinks, so it will work in
  Windows too. The latter would work as now, with symlinks to the
  imagecache (copies on Windows). A third mode that makes image copies
  regardless of platform could also be useful.

* Write test suites for modules that lack one.

* Store undated images (i.e. those without a "captured" attribute) in
  a better way in generated albums. They are currently put in a single
  directory.

* Write a simple, run-once client that creates a temporary shelf,
  registers images in given directories, generates an album and
  removes the shelf?

* More output modules?

* Slideshow functionality in generated HTML-albums.

* Add possibility of giving an optional filter parameter when
  generating albums. Add default filter parameter. Example: Supplying
  the filter "not private" would exclude all images with the "private"
  category.

* Create some kind of graphic Windows client. A custom web server with
  an ordinary web client would probably do well.

* Parameterize output modules? It could be interesting to be able to
  tweak things like thumbnail size, image sizes, CSS, shadows, detail
  page generation, etc. on a per-generation basis.

* New search operators for finding images contained in a given album
  and albums that contain a given image.

* Make sure the stored Unicode text strings are normalized in the
  shelf.

* Some kind of multiple image versions feature would be nice. An image
  that, for example, have been cropped or have had some color
  adjustments done probably should share most categories and
  attributes with the original image. Should the categories/attributes
  just be copied from the original image or should we store some kind
  of association in the shelf? LysKOM texts: 10395020, 10411412.

  Use case: I capture a picture, register it with Kofoto and add some
  categories and a description attribute. Later, I fix red eyes in the
  picture and want to register the edited picture too while keeping
  the original. I then want the categories and the description
  attribute to be inherited in some way.

* Use ImageMagick/jpegtran if PIL isn't available?

* Make mapping of EXIF attributes to Kofoto attributes configurable.
  Add possiblity of reimporting EXIF attributes?

* Read "directories to ignore" from configuration.

* Specify (in configuration) default attributes (like photographer) to
  add when registering images? Ability to supply more/override
  attributes when importing?

* Make gkofoto aware of the orientation attribute. Alternatively,
  remove handling of orientation from Kofoto altogether. Or make it
  configurable.

* Define a transport format (XML-based?) for metadata. Add import and
  export commands. How should conflicts be handled?

* Create a home page for Kofoto. Maybe a Wiki?

* Write documentation.

* Store a log of changes to the shelf and add possibility of backing
  out changes.

* Create an extension module wrapping the jpegtran code so that we
  don't have to rely on an external jpegtran program.

* Load thumbnails in a separate thread in gkofoto to avoid locking up
  the UI.

* Preload next and previous image in gkofoto by a separate thread.

* Make it possible to mark images as being off-line. If an image is
  off-line, don't look for it in the recorded location but instead
  make use of the largest available image in the image cache.

* Store a bit larger (default 256x256 or so) thumbnails in the image
  cache. Make it possible in gkofoto to choose an arbitrary thumbnail
  size not larger than the "large thumbnail" size.

* Add HTML generation dialog to gkofoto.

* Add "update locations" dialog to gkofoto.

* Add configuration dialog to gkofoto.

* Add a possibility of defining a filter in gkofoto. A filter of "not
  private" would for instance exclude images with the category
  "private" from search results.

* Slideshow functionality in gkofoto.

* Add possibility to edit attributes for multiple objects at once, in
  gkofoto.
