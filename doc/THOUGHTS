Attributes:

    For both albums and images:

    * description: Image/album text, 0 to many rows, not suitable for
      link text.
    * title: Short description, suitable for link text.

    For images only:

    * exposuretime: Exposure time (could be fetched from EXIF
      attribute ExposureTime).
    * flash: Whether flash was fired (could be fetched from EXIF
      attribute Flash).
    * fnumber: FNumber (could be fetched from EXIF attribute
      FNumber).
    * height: Image height (could be fetched from EXIF attribute
      ExifImageHeight).
    * make: Camera vendor (?) (ex: Canon).
    * model: Camera model (ex: Canon DIGITAL IXUS).
    * orientation: Image orientation in degrees (up, right, left, down).
    * photographer: Photographer.
    * width: Image width (could be fetched from EXIF attribute
      ExifImageWidth).

Key features (why we can't use J. Random Photo Album software):

    * Command-line interface available.
    * Generation of static HTML pages that can be burned to a CD-ROM
      and viewed with an ordinary web browser with no special demands
      on the browser.
    * The album tree is separate from where the images are stored.
    * Original image files are never modified.
    * The meta data may be stored in a human-readable, future-proof
      way.
    * One and the same image can be included in several albums. And
      likewise for albums.
    * "Magical" albums, e.g. one listing images that aren't included
      in any album, and one listing images sorted after timestamp.
    * (Overridable attributes depending on the location of the
      album/image.) -- would be nice...

Meta data:

    Meta data is stored in an SQLite database. The shelf records
    information about registered images and albums. Information is
    e.g. attributes (as listed above) and the image list for an album.

Configuration:

    Configuration not specific to a shelf is stored in
    ~/.kofoto/config.

Database location:

    The default database file is ~/.kofoto/shelf.

Database schema:

    See src/lib/kofoto/shelf.py.

Design requirements, goals and solutions:

    * It should be very hard to lose any information.

      - Original image files (downloaded from the camera) are never
        changed (by Kofoto).
      - Meta information can be exported to a future-safe format.
      - Original image files can be renamed/moved without loss of meta
        information.
      - Meta information is stored a database with ACID transactions.

    * It should be easy to install and to get going.

      - Requires no configuration of a database manager.

    * It should be possible to uniquely identify images.

      - A checksum of (parts of) an image is used as identifier.

    * It should be possible to uniquely identify albums.

      - Each album has a unique human-recognizable tag.

    * Albums should contain an ordered list of albums and images.

      - Albums contain an ordered list of albums and images.

    * The same album/image should be able to be a part of several
      different albums.

      - The same album/image can be a part of several different
        albums without duplication of information.

    * It should be possible to view the albums without a specialized program.

      - Standard HTML pages that can be viewed with an ordinary web
        browser are generated.

    * It should be possible to view the album from read-only media.

      - A set of static HTML pages and images are pregenerated (i.e.
        not per view).

    * It should be possible to add meta information and new kinds of
      meta information.

      - It is possible to associate arbitrary attributes with images
        and albums.

    * It should be possible to store information about image
      orientation, gamma value and other parameters that may affect
      generated images.

      - Stored as image attributes.

Magic albums that would be nice to have:

    * Hierarchy of locations.

      Images can have the attribute "location" set to a list of
      locations that represent increasingly specific physical places.
      Example: Image1 with location set to "Sweden:Linköping:Lambohov"
      and Image2 with location set to "Sweden:Linköping:Ryd" would
      render an album graph like this:

          [A] Locations
              [A] Sweden
                  [A] Linköping
                      [A] Lambohov
                          [I] Image1
                      [A] Ryd
                          [I] Image2

      Or, maybe better, define a DAG in configuration and only one
      keyword in the attribute. E.g., store

          locations = {
              "Linköping": "Sweden",
              "Lambohov": "Linköping",
              "Ryd": "Linköping",
          }

      or maybe

          locations = {
              "Sweden": "Linköping",
              "Linköping": ["Lambohov",  "Ryd"],
          }

      in ~/.kofoto/config and put "Lambohov" and "Ryd" in "location"
      for Image1 and Image2.

      This can also be used for searching, so that both Image1 and
      Image2 can be found when searching for location "Linköping".

      Or should attribute DAG functionality be provided by the
      database?

    * Chronological with day granularity.

          [A] Chronological
              [A] 2003
                  [A] March 2003
                      [A] 17 March 2003
                          [I] Image1
                      [A] 19 March 2003
                          [I] Image2

Think more about:

    * How should EXIF tags be imported to image attributes? (Should a
      given subset be imported verbatim or with a special prefix or
      mapped to non-EXIF names?)
    * Which auxilliary attributes should be set on import? Specify
      default attributes (like photographer) to add in configuration?
      Ability to supply more/override attributes when importing?
    * How to search?
    * How to exclude objects from generation?
    * Let instances cache image/album information so that getLocation
      et al don't need to perform database access?
