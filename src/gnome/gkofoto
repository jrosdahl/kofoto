#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk
import gtk.gdk
import gobject
import gtk.glade
import gnome
import gnome.ui
from gnomekofoto.environment import env
from kofoto.imagecache import *
from gnomekofoto.objectcollection import *
from gnomekofoto.objectcollectionfactory import *
from gnomekofoto.mainwindow import *
from gnomekofoto.categories import *

class WidgetsWrapper:
    def __init__(self):
        gnome.init("GKofoto", "0.1")
        self.widgets = gtk.glade.XML(env.gladeFile, "mainWindow")
    def __getitem__(self, key):
        return self.widgets.get_widget(key)

class Controller:
    def __init__(self):
        self.__clipboard = None

    def start(self):
        self.__factory = ObjectCollectionFactory()
        currentObjects = self.__factory.getDefaultObjectCollection()
        self.__mainWindow = MainWindow(currentObjects)
        env.widgets["mainWindow"].connect('destroy', self.quit, False)
        env.widgets["mainWindow"].show()
        currentObjects = None
        gtk.main()

    def quit(self, gnomeApp, cancelButton=True):
        if env.shelf.isModified():
            widgets = gtk.glade.XML(env.gladeFile, "quitDialog")
            quitDialog = widgets.get_widget("quitDialog")
            if not cancelButton:
                widgets.get_widget("cancel").set_sensitive(False)
            result = quitDialog.run()
            if result == 0:
                print "commit"
                env.shelf.commit()
                gtk.main_quit()
            elif result == 1:
                print "rollback"
                env.shelf.rollback()
                gtk.main_quit()
            else:
                quitDialog.destroy()
                return
        else:
            print "rollback"
            env.shelf.rollback()
            gtk.main_quit()

    def save(self, gnomeApp):
        env.shelf.commit()
        print "commit"
        env.shelf.begin()

    def revert(self, gnomeApp):
        env.shelf.rollback()
        print "rollback"
        env.shelf.begin()
        self.__albums.loadAlbumTree()
        self.__categories.loadCategoryTree()
        loadedObjects = self.__factory.reloadPrevious()
        self.__loadObjects(loadedObjects)

    def loadUrl(self, url):
        # TODO Move method to mainWindow?
        self.__mainWindow.setObjectCollection(self.__factory.getObjectCollection(url))

    def clipboardSet(self, object):
        self._clipboard = object
        # TODO
        # self._categories.updateContextMenu()

    def clipboardClear(self):
        self._clipboard = None
        # TODO        
        # self._categories.updateContextMenu()

    def clipboardPop(self):
        popedItem = self._clipboard
        self._clipboard = None
        # TODO        
        # self._categories.updateContextMenu()
        return popedItem

    def clipboardHasCategory(self):
        # TODO        
        if isinstance(self._clipboard, ClipboardCategories):
            return True
        else:
            return False

######################################################################
### Start

env.widgets = WidgetsWrapper()
env.controller = Controller()
env.controller.start()
