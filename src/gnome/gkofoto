#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk
import gtk.gdk
import gobject
import gtk.glade
import gnome
import gnome.ui
from gnomekofoto.environment import env

from kofoto.imagecache import *

from gnomekofoto.objectselection import *
from gnomekofoto.objectcontextmenu import *
from gnomekofoto.albums import *
from gnomekofoto.objects import *
from gnomekofoto.mainwindow import *
from gnomekofoto.tableview import *
from gnomekofoto.thumbnailview import *
from gnomekofoto.singleimageview import *
from gnomekofoto.categories import *
from gnomekofoto.source import *

######################################################################
### Classes

class WidgetsWrapper:
    def __init__(self):
        gnome.init("GKofoto", "0.0001")
        self.widgets = gtk.glade.XML(env.gladeFile, "mainWindow")
    def __getitem__(self, key):
        return self.widgets.get_widget(key)

class Controller:
    def __init__(self):
        self._clipboard = None

    def start(self):
        self._source = Source()
        self._selectedObjects = ObjectSelection(self._objectSelectionChanged)
        self._loadedObjects = Objects(self._selectedObjects)
        self._objectContextMenu = ObjectContextMenu(self._loadedObjects, self._selectedObjects)
        self._albums = Albums(self._source)
        self._categories = Categories(self._loadedObjects,
                                      self._selectedObjects,
                                      self._source)
        self._thumbnailView = ThumbnailView(self._loadedObjects,
                                            self._selectedObjects,
                                            self._objectContextMenu)
        self._tableView = TableView(self._loadedObjects,
                                    self._selectedObjects,
                                    self._objectContextMenu)
        self._singleImageView = SingleImageView(self._loadedObjects,
                                                self._selectedObjects,
                                                self._objectContextMenu)
        self.showThumbnailView()
        MainWindow()
        env.widgets["mainWindow"].connect('destroy', self.quit, gtk.FALSE)
        env.widgets["mainWindow"].show()
        env.shelf.begin()
        gtk.main()

    def quit(self, gnomeApp, cancelButton=gtk.TRUE):
        if env.shelf.isModified():
            widgets = gtk.glade.XML(env.gladeFile, "quitDialog")
            quitDialog = widgets.get_widget("quitDialog")
            if not cancelButton:
                widgets.get_widget("cancel").set_sensitive(gtk.FALSE)
            result = quitDialog.run()
            if result == 0:
                print "commit"
                env.shelf.commit()
                gtk.main_quit()
            elif result == 1:
                print "rollback"
                env.shelf.rollback()
                gtk.main_quit()
            else:
                quitDialog.destroy()
                return
        else:
            print "rollback"
            env.shelf.rollback()
            gtk.main_quit()

    def save(self, gnomeApp):
        env.shelf.commit()
        print "commit"
        env.shelf.begin()

    def revert(self, gnomeApp):
        env.shelf.rollback()
        print "rollback"
        env.shelf.begin()
        print "TODO: reload application information here"

    def loadObjects(self, objectList):
        self._selectedObjects.clear()
        self._currentView.freeze()
        self._loadedObjects.loadObjectList(objectList)
        self._loadedObjects.loadThumbnails()
        self._currentView.thaw()

    def newObjectModelLoaded(self):
        print "newObjectModelLoaded not yet implemented"

    def _objectSelectionChanged(self):
        self._currentView.selectionUpdated()
        self._objectContextMenu.updateContextMenu()
        self._categories.updateView()

    def _viewChanged(self):
        self._currentView.show()
        for hiddenView in self._hiddenViews:
            hiddenView.hide()
        self._currentView.selectionUpdated()

    def showTableView(self):
        self._currentView = self._tableView
        self._hiddenViews = [self._thumbnailView, self._singleImageView]
        self._viewChanged()

    def showThumbnailView(self):
        self._currentView = self._thumbnailView
        self._hiddenViews = [self._tableView, self._singleImageView]
        self._viewChanged()

    def showSingleImageView(self):
        self._currentView = self._singleImageView
        self._hiddenViews = [self._tableView, self._thumbnailView]
        self._viewChanged()

    def clipboardSet(self, object):
        self._clipboard = object
        self._categories.updateContextMenu()

    def clipboardClear(self):
        self._clipboard = None
        self._categories.updateContextMenu()

    def clipboardPop(self):
        popedItem = self._clipboard
        self._clipboard = None
        self._categories.updateContextMenu()
        return popedItem

    def clipboardHasCategory(self):
        if isinstance(self._clipboard, ClipboardCategories):
            return gtk.TRUE
        else:
            return gtk.FALSE

######################################################################
### Start

env.widgets = WidgetsWrapper()
env.controller = Controller()
env.controller.start()
