#!/usr/bin/env python

import sys
import os
import getopt
import pygtk
pygtk.require('2.0')
import gtk
import gtk.gdk
import gobject

######################################################################

# Find libraries if installed in ../lib (like in the source tree).
if os.path.islink(sys.argv[0]):
    link = os.readlink(sys.argv[0])
    absloc = os.path.normpath(
        os.path.join(os.path.dirname(sys.argv[0]), link))
    bindir = os.path.dirname(absloc)
else:
    bindir = os.path.dirname(sys.argv[0])
sys.path.insert(0, os.path.join(bindir, "..", "lib"))

from kofoto.common import *
from kofoto.shelf import *
from kofoto.imagecache import *

from mainwindow import *
from albummodel import *
from albumview import *
from imagelistmodel import *
from imagelistcolumns import *
from imagelistview import *
from imageview import *


######################################################################
### Constants.

_SHELF_LOCATION = os.path.expanduser("~/.kofoto/shelf") # TODO: Read from configuration file

######################################################################
### Start

class Controller:

    def __init__(self):
        self._shelf = Shelf(_SHELF_LOCATION)

        # Album
        self._albumModel = AlbumModel(self._shelf)
        self._albumView = AlbumView(self._albumModel)
        albumSelection = self._albumView.get_selection()
        albumSelection.connect('changed', self.albumSelectionHandler)

        # Image list
        self._imageListColumns = ImageListColumns()
        self._imageListModel = ImageListModel(self._shelf, self._imageListColumns)
        self._imageListView = ImageListView(self._imageListModel, self._imageListColumns)
        imageSelection = self._imageListView.get_selection()
        imageSelection.connect('changed', self.imageSelectionHandler)

        # Image view
        self._imageView = ImageView()

        # Main window
        mainWindow = MainWindow(self._albumModel,
                                self._albumView,
                                self._imageListModel,
                                self._imageListView,
                                self._imageView)
        mainWindow.connect('destroy', lambda w: gtk.main_quit())
        mainWindow.show_all()
       
    def albumSelectionHandler(self, selection):
        self._shelf.begin()
        albumModel, iter = selection.get_selected()
        album = albumModel.get_value(iter, albumModel.COLUMN_OBJECT)
        selectedImages = []
        for child in album.getChildren():
            if not child.isAlbum():
                selectedImages.append(child)
        self._shelf.rollback()
        self._imageListModel.load("Album", selectedImages)

    def imageSelectionHandler(self, selection):
        imageListModel, iter = selection.get_selected()
        if iter != None:
            imageLocation = imageListModel.get_value(iter,
                                                     self._imageListColumns.getColNumber("Location"))
            self._imageView.loadFile(imageLocation)
        
        
controller = Controller()
gtk.main()

