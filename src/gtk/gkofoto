#!/usr/bin/env python
import pygtk
pygtk.require('2.0')
import gtk
import gtk.gdk
import gobject
import gtk.glade
import gnome
import gnome.ui
from environment import env

from kofoto.imagecache import *

from albums import *
from images import *
from mainwindow import *
from tableview import *
from thumbnailview import *
from categories import *

######################################################################
### Classes

class WidgetsWrapper:
    def __init__(self):
        gnome.init("GKofoto", "0.0001")
        gladeFile = env.baseDir + "/glade/gkofoto.glade"
        self.widgets = gtk.glade.XML(gladeFile, "mainWindow")
    def __getitem__(self, key):
        return self.widgets.get_widget(key)
    def signal_autoconnect(self, dic):
        self.widgets.signal_autoconnect(dic)

class Controller:
    _loadedImages = None
    _loadedImagesTitel = ""
    _wantedThumbnailSize = None
    _tableView = TableView()
    _thumbnailView = ThumbnailView()

    def __init__(self):
        self._wantedThumbnailSize = 100 # TODO: Calculate from dropdown menu in the GUI
        albums = Albums()
        categories = Categories()
        self.newDataModel()
        MainWindow()

    def start(self):
        env.widgets["mainWindow"].connect('destroy', lambda w: gtk.main_quit())
        env.widgets["mainWindow"].show()
        gtk.main()

    def newDataModel(self):
        self._loadedImages = Images()
        self._tableView.setModel(self._loadedImages.sortedModel)
        self._tableView.setAttributes(self._loadedImages.attributeNamesMap)
        self._thumbnailView.setModel(self._loadedImages.sortedModel)
        
    def loadImages(self, imageList, title):
        self._loadedImagesTitle = title
        self._thumbnailView.freeze()
        self._loadedImages.loadImageList(imageList)
        self._loadedImages.loadThumbnails(self._wantedThumbnailSize)
        self._thumbnailView.thaw()

        
######################################################################
### Start

env.widgets = WidgetsWrapper()
env.controller = Controller()
env.controller.start()

        


