#! /usr/bin/env python

import getopt
import locale
import os
import sys

######################################################################

# Find libraries if installed in ../lib (like in the source tree).
if os.path.islink(sys.argv[0]):
    link = os.readlink(sys.argv[0])
    absloc = os.path.normpath(
        os.path.join(os.path.dirname(sys.argv[0]), link))
    bindir = os.path.dirname(absloc)
else:
    bindir = os.path.dirname(sys.argv[0])
sys.path.insert(0, os.path.join(bindir, "..", "lib"))

from kofoto.common import *
from kofoto.shelf import *
from kofoto.imagecache import *
from kofoto.config import *

######################################################################
### Locale.

locale.setlocale(locale.LC_ALL, "")
CODESET = locale.nl_langinfo(locale.CODESET)

######################################################################
### Constants.

PRINT_GRAPH_INDENT = 4
_DIRECTORIES_TO_IGNORE = [".svn"]

######################################################################
### Exceptions.

class ArgumentError:
    pass

######################################################################
### Helper functions.

def _from_uc(s):
    return s.encode(CODESET)

def _to_uc(s):
    return unicode(s, CODESET)

def displayHelp():
    sys.stdout.write(
#                                                                 79 characters here:  |
        "Usage: kofoto [flags] command [parameters]\n"
        "\n"
        "Flags:\n"
        "\n"
        "    -h, --help                       Display this help.\n"
        "        --configfile FILE            Use configuration file FILE instead of the\n"
        "                                     default (%s).\n"
        "        --gencharenc ENC             Generate HTML pages with character\n"
        "                                     encoding ENC instead of the default\n"
        "                                     (taken from locale settings).\n"
        "    -l, --location LOCATION          Add/register to location LOCATION.\n"
        "                                     Default: last.\n"
        "        --shelf SHELF                Use the shelf SHELF instead of the default\n"
        "                                     (specified in the configuration file).\n"
        "    -t, --type TYPE                  Use album type TYPE when creating an album\n"
        "                                     or output type TYPE when generating output.\n"
        "    -v, --verbose                    Be verbose.\n"
        "    -V, --version                    Print version out standard output.\n"
        "\n"
        "Commands:\n"
        "\n"
        "    For shelfs\n"
        "    ==========\n"
        "    check                            Find missing images and print some\n"
        "                                     statistics.\n"
        "    create-album TAG                 Create an empty, unlinked album with tag\n"
        "                                     TAG. If a type argument is not given\n"
        "                                     with -t/--type, an album of type \"plain\"\n"
        "                                     will be created.\n"
        "    create-shelf                     Create an empty shelf.\n"
        "    print-graph [ALBUM]              Print the album graph for ALBUM (default:\n"
        "                                     root).\n"
        "    rename-tag OLDTAG NEWTAG         Rename an album tag.\n"
        "    update-checksums                 Traverse all images in the shelf and\n"
        "                                     remember their new checksums.\n"
        "    update-locations DIR [DIR ...]   Traverse the given directories\n"
        "                                     recursively and remember the new\n"
        "                                     locations of images.\n"
        "\n"
        "    For albums and images\n"
        "    =====================\n"
        "\n"
        "    add-category CAT OBJ [OBJ ...]   Add category CAT (tag or ID) to the given\n"
        "                                     objects.\n"
        "    delete-attribute NAME OBJ [OBJ ...]\n"
        "                                     Delete attribute NAME for the given\n"
        "                                     objects.\n"
        "    get-attribute NAME OBJ           Get attribute NAME for object OBJ.\n"
        "    get-attributes OBJ               Get attributes for object OBJ.\n"
        "    get-categories OBJ               Get categories for object OBJ.\n"
        "    obliterate OBJ [OBJ ...]         Delete the given objects permanently. All\n"
        "                                     metadata is also deleted.\n"
        "    remove ALBUM POS [POS ...]       Remove the given objects from ALBUM.\n"
        "    remove-category CAT OBJ [OBJ ...]\n"
        "                                     Remove category CAT from the given\n"
        "                                     objects.\n"
        "    search EXPR                      Search for albums and images matching a\n"
        "                                     expression.\n"
        "    set-attribute NAME VALUE OBJ [OBJ ...]\n"
        "                                     Set attribute NAME to VALUE for the given\n"
        "                                     objects.\n"
        "\n"
        "    For albums\n"
        "    ==========\n"
        "    add DEST OBJ [OBJ ...]           Add the given objects (albums and images)\n"
        "                                     to the album DEST. (The objects are placed\n"
        "                                     last if a location is not specified with\n"
        "                                     -l/--location.)\n"
        "    generate ALBUM DEST              Generate output for ALBUM in DESTINATION.\n"
        "                                     Use -t/--type to use another output type\n"
        "                                     than the default.\n"
        "    register DEST PATH [PATH ...]    Register objects (i.e. directories and\n"
        "                                     images) and add them to the album DEST.\n"
        "                                     (The objects are placed last.)\n"
        "                                     Directories are recursively scanned for\n"
        "                                     other directories and images, which also\n"
        "                                     will be registered.\n"
        "\n"
        "    For categories\n"
        "    ==============\n"
        "    connect-category PARENT CHILD    Make a category a child of another\n"
        "                                     category.\n"
        "    disconnect-category PARENT CHILD Remove parent-child realationship bewteen\n"
        "                                     two categories.\n"
        "    create-category TAG DESC         Create category.\n"
        "    delete-category TAG              Delete category.\n"
        "    print-categories                 Print category tree.\n"
        "    rename-category OLDTAG NEWTAG    Rename category tag.\n"
        "    set-category-description TAG DESC\n"
        "                                     Set category description.\n"
        "\n"
        "\n"
        "    Miscellaneous\n"
        "    =============\n"
        "    clean-cache                      Clean up the image cache (remove\n"
        "                                     left-over generated images).\n"
        "\n"
        "Album types:\n"
        "\n"
        "    allalbums    All albums, sorted by tag.\n"
        "    allimages    All images, sorted by timestamp.\n"
        "    orphans      All albums and images that don't exist in any plain album.\n"
        "    plain        An ordinary container that holds albums and images.\n"
        "\n"
        % DEFAULT_CONFIGFILE)
#                                                                 79 characters here:  |


def printOutput(infoString):
    sys.stdout.write(infoString)
    sys.stdout.flush()

def printError(errorString):
    sys.stderr.write("Error: " + errorString)

def printErrorAndExit(errorString):
    printError(errorString)
    sys.exit(1)


######################################################################
### Commands.

def cmdAdd(env, args):
    if len(args) < 2:
        raise ArgumentError
    destalbum = env.shelf.getAlbum(args[0])
    objects = [env.shelf.getObject(x) for x in args[1:]]
    addHelper(env, destalbum, objects)


def addHelper(env, destalbum, objects):
    oldchildren = list(destalbum.getChildren())
    if env.location == -1:
        loc = len(oldchildren)
    else:
        loc = env.location
    destalbum.setChildren(oldchildren[:loc] + objects + oldchildren[loc:])


def cmdAddCategory(env, args):
    if len(args) < 2:
        raise ArgumentError
    category = env.shelf.getCategory(args[0])
    for arg in args[1:]:
        env.shelf.getObject(arg).addCategory(category)


def cmdCheck(env, args):
    stats = env.shelf.getStatistics()
    env.out("Number of albums: %d\n" % stats["nalbums"])
    env.out("Number of images: %d\n" % stats["nimages"])
    badchecksums = []
    missingfiles = []
    for image in env.shelf.getAllImages():
        location = image.getLocation()
        if env.verbose:
            env.out("Checking %s ...\n" % _from_uc(location))
        try:
            realId = computeImageHash(location)
            storedId = image.getHash()
            if realId != storedId:
                badchecksums.append(location)
        except IOError:
            missingfiles.append(location)

    env.out("Missing images:")
    if badchecksums or missingfiles:
        for path in badchecksums:
            env.out("\n    (bad checksum) %s" % _from_uc(path))
        for path in missingfiles:
            env.out("\n    (missing) %s" % _from_uc(path))
        env.out("\n")
    else:
        env.out(" none\n")


def cmdCleanCache(env, args):
    if len(args) != 0:
        raise ArgumentError
    env.imagecache.cleanup(env.shelf.getAllImages(), env.imagesizes)


def cmdConnectCategory(env, args):
    if len(args) != 2:
        raise ArgumentError
    parent = env.shelf.getCategory(args[0])
    child = env.shelf.getCategory(args[1])
    parent.connectChild(child)


def cmdCreateAlbum(env, args):
    if len(args) != 1:
        raise ArgumentError
    if env.type:
        atype = env.type
    else:
        atype = u"plain"
    env.shelf.createAlbum(args[0], atype)


def cmdCreateCategory(env, args):
    if len(args) != 2:
        raise ArgumentError
    env.shelf.createCategory(args[0], args[1])


def cmdDeleteAttribute(env, args):
    if len(args) < 2:
        raise ArgumentError
    attr = args[0]
    for arg in args[1:]:
        env.shelf.getObject(arg).deleteAttribute(attr)


def cmdDeleteCategory(env, args):
    if len(args) != 1:
        raise ArgumentError
    env.shelf.deleteCategory(args[0])


def cmdDisconnectCategory(env, args):
    if len(args) != 2:
        raise ArgumentError
    parent = env.shelf.getCategory(args[0])
    child = env.shelf.getCategory(args[1])
    parent.disconnectChild(child)


def cmdGenerate(env, args):
    if len(args) != 2:
        raise ArgumentError
    root = env.shelf.getAlbum(args[0])
    dest = args[1]
    if env.type:
        otype = env.type
    else:
        otype = u"woolly"
    import kofoto.generate
    try:
        generator = kofoto.generate.Generator(otype, env)
        generator.generate(root, dest, env.gencharenc)
    except kofoto.generate.OutputTypeError, x:
        env.errexit("No such output module: %s\n" % _from_uc(x))


def cmdGetAttribute(env, args):
    if len(args) != 2:
        raise ArgumentError
    object = env.shelf.getObject(args[0])
    value = object.getAttribute(args[1])
    if value:
        env.out(_from_uc(value) + "\n")


def cmdGetAttributes(env, args):
    if len(args) != 1:
        raise ArgumentError
    object = env.shelf.getObject(args[0])
    for name in object.getAttributeNames():
        env.out("%s: %s\n" % (_from_uc(name),
                              _from_uc(object.getAttribute(name))))


def cmdGetCategories(env, args):
    if len(args) != 1:
        raise ArgumentError
    object = env.shelf.getObject(args[0])
    for category in object.getCategories():
        env.out("%s (%s) <%s>\n" % (_from_uc(category.getDescription()),
                                    _from_uc(category.getTag()),
                                    category.getId()))

def cmdObliterate(env, args):
    if len(args) < 1:
        raise ArgumentError
    for obj in args:
        env.shelf.deleteObject(obj)


def cmdPrintCategories(env, args):
    if len(args) != 0:
        raise ArgumentError
    for category in env.shelf.getRootCategories():
        printCategoriesHelper(env, category, 0)


def printCategoriesHelper(env, category, level):
    indentspaces = PRINT_GRAPH_INDENT * " "
    env.out("%s%s (%s) <%s>\n" % (
        level * indentspaces,
        _from_uc(category.getDescription()),
        _from_uc(category.getTag()),
        category.getId()))
    for child in category.getChildren():
        printCategoriesHelper(env, child, level + 1)


def cmdPrintGraph(env, args):
    if len(args) > 0:
        root = env.shelf.getAlbum(args[0])
    else:
        root = env.shelf.getRootAlbum()
    printGraphHelper(env, root, 0, [])


def printGraphHelper(env, object, level, visited):
    imgtmpl = "%(indent)s[I] %(name)s <%(id)s>\n"
    albtmpl = "%(indent)s[A] %(name)s <%(id)s> (%(type)s)\n"
    indentspaces = PRINT_GRAPH_INDENT * " "
    if object.isAlbum():
        tag = object.getTag()
        env.out(albtmpl % {"indent": level * indentspaces,
                           "name": _from_uc(tag),
                           "id": object.getId(),
                           "type": _from_uc(object.getType()),
                           })
        if tag in visited:
            env.out("%s[...]\n" % ((level + 1) * indentspaces))
        else:
            for child in object.getChildren():
                printGraphHelper(env,
                                 child,
                                 level + 1,
                                 visited + [tag])
    else:
        env.out(imgtmpl % {"indent": level * indentspaces,
                           "name": _from_uc(object.getLocation()),
                           "id": object.getId(),
                           })
    if env.verbose:
        attrtmpl = "%(indent)s%(key)s: %(value)s\n"
        names = object.getAttributeNames()
        for name in names:
            env.out(attrtmpl % {
                "indent": (level + 1) * indentspaces,
                "key": _from_uc(name),
                "value": _from_uc(object.getAttribute(name)),
                })


def cmdRegister(env, args):
    if len(args) < 2:
        raise ArgumentError
    destalbum = env.shelf.getAlbum(args[0])
    registerHelper(env, destalbum, [_from_uc(x) for x in args[1:]])


def registerHelper(env, destalbum, paths):
    paths.sort()
    newchildren = []
    for path in paths:
        if env.verbose:
            env.out("Processing %s ...\n" % path)
        if os.path.isdir(path):
            tag = os.path.basename(path)
            if tag in _DIRECTORIES_TO_IGNORE:
                if env.verbose:
                    env.out("Ignoring.\n")
                continue
            while True:
                try:
                    album = env.shelf.createAlbum(unicode(tag, env.codeset))
                    break
                except (AlbumExistsError, ReservedAlbumTagError):
                    tag = tag + "_"
            newchildren.append(album)
            env.out("Registered directory %s as an album with tag %s\n" % (
                path,
                tag))
            registerHelper(env,
                           album,
                           [os.path.join(path, x) for x in os.listdir(path)])
        elif os.path.isfile(path):
            try:
                image = env.shelf.createImage(unicode(path, env.codeset))
                newchildren.append(image)
                if env.verbose:
                    env.out("Registered image: %s\n" % path)
            except NotAnImageError, x:
                if env.verbose:
                    env.out("Ignoring non-image file: %s\n" % path)
            except ImageExistsError, x:
                env.err("Ignoring already registered image: %s\n" % path)
        else:
            env.err("No such file or directory (ignored): %s\n" % path)
    addHelper(env, destalbum, newchildren)


def cmdRemove(env, args):
    if len(args) < 2:
        raise ArgumentError
    album = env.shelf.getAlbum(args[0])
    positions = []
    for pos in args[1:]:
        try:
            positions.append(int(pos))
        except ValueError:
            env.errexit("Bad position: %s\n" % _from_uc(pos))
    positions.sort()
    positions.reverse()
    children = album.getChildren()
    if not (0 <= positions[0] < len(children)):
        env.errexit("Bad position: %d\n" % positions[0])
    for pos in positions:
        del children[pos]
    album.setChildren(children)


def cmdRemoveCategory(env, args):
    if len(args) < 2:
        raise ArgumentError
    category = env.shelf.getCategory(args[0])
    for arg in args[1:]:
        env.shelf.getObject(arg).removeCategory(category)


def cmdRenameCategory(env, args):
    if len(args) != 2:
        raise ArgumentError
    env.shelf.getCategory(args[0]).setTag(args[1])


def cmdRenameTag(env, args):
    if len(args) != 2:
        raise ArgumentError
    env.shelf.getAlbum(args[0]).setTag(args[1])


def cmdSearch(env, args):
    if len(args) != 1:
        raise ArgumentError
    objects = env.shelf.search(args[0])
    strids = [str(x.getId()) for x in objects]
    if strids:
        env.out(" ".join(strids) + "\n")


def cmdSetAttribute(env, args):
    if len(args) < 3:
        raise ArgumentError
    attr = args[0]
    value = args[1]
    for arg in args[2:]:
        env.shelf.getObject(arg).setAttribute(attr, value)


def cmdSetCategoryDescription(env, args):
    if len(args) != 2:
        raise ArgumentError
    env.shelf.getCategory(args[0]).setDescription(args[1])


def cmdUpdateChecksums(env, args):
    for image in env.shelf.getAllImages():
        location = image.getLocation()
        if os.path.isfile(location):
            try:
                hash = computeImageHash(location)
                oldhash = image.getHash()
                if oldhash != hash:
                    image.setHash(hash)
                    env.out("New checksum for %s\n" % _from_uc(location))
                else:
                    if env.verbose:
                        env.out("Same checksum as before for %s\n" %
                                _from_uc(location))
            except IOError, x:
                env.err("Failed to read: %s\n" % _from_uc(location))
        else:
            env.err("Image does not exist: %s\n" % _from_uc(location))


def cmdUpdateLocations(env, args):
    if len(args) < 1:
        raise ArgumentError
    for dir in args:
        os.path.walk(os.path.abspath(dir),
                     updateLocationsHelper,
                     env)


def updateLocationsHelper(env, dir, files):
    for x in _DIRECTORIES_TO_IGNORE:
        try:
            files.remove(x)
        except ValueError:
            # x not in files.
            pass
    for file in files:
        location = os.path.join(dir, file)
        if os.path.isfile(location):
            try:
                hash = computeImageHash(location)
                image = env.shelf.getImage(hash)
                oldlocation = image.getLocation()
                if oldlocation != location:
                    image.setLocation(location)
                    env.out("New location: %s --> %s\n" % (
                        _from_uc(oldlocation),
                        _from_uc(location)))
                else:
                    if env.verbose:
                        env.out("Same location as before: %s\n" %
                                _from_uc(location))
            except IOError, x:
                if env.verbose:
                    env.out("Failed to read: %s\n" % _from_uc(location))
            except ImageDoesNotExistError, x:
                if env.verbose:
                    env.out("Image does not exist: %s\n" % _from_uc(location))


commandTable = {
    "add": cmdAdd,
    "add-category": cmdAddCategory,
    "check": cmdCheck,
    "clean-cache": cmdCleanCache,
    "connect-category": cmdConnectCategory,
    "create-album": cmdCreateAlbum,
    "create-category": cmdCreateCategory,
    "delete-attribute": cmdDeleteAttribute,
    "delete-category": cmdDeleteCategory,
    "disconnect-category": cmdDisconnectCategory,
    "generate": cmdGenerate,
    "get-attribute": cmdGetAttribute,
    "get-attributes": cmdGetAttributes,
    "get-categories": cmdGetCategories,
    "obliterate": cmdObliterate,
    "print-categories": cmdPrintCategories,
    "print-graph": cmdPrintGraph,
    "register": cmdRegister,
    "remove": cmdRemove,
    "remove-category": cmdRemoveCategory,
    "rename-category": cmdRenameCategory,
    "rename-tag": cmdRenameTag,
    "search": cmdSearch,
    "set-attribute": cmdSetAttribute,
    "set-category-description": cmdSetCategoryDescription,
    "update-checksums": cmdUpdateChecksums,
    "update-locations": cmdUpdateLocations,
}

######################################################################
### Main

def main(argv):
    for i in range(len(argv)):
        argv[i] = _to_uc(argv[i])
    try:
        optlist, args = getopt.getopt(
            argv[1:],
            "hl:t:vV",
            ["configfile=",
             "gencharenc=",
             "help",
             "location=",
             "shelf=",
             "type=",
             "verbose",
             "version"])
    except getopt.GetoptError:
        printErrorAndExit("Unknown flag. See \"kofoto --help\" for help.\n")

    class CommandEnvironment:
        pass
    env = CommandEnvironment()
    env.location = -1
    env.verbose = False
    env.type = None

    shelfLocation = None
    configFilename = DEFAULT_CONFIGFILE
    genCharEnc = CODESET
    for opt, optarg in optlist:
        if opt == "--configfile":
            configFilename = os.path.expanduser(_from_uc(optarg))
        elif opt == "--gencharenc":
            genCharEnc = str(optarg)
        elif opt in ("-h", "--help"):
            displayHelp()
            sys.exit(0)
        elif opt in ("-l", "--location"):
            if optarg == "last":
                env.location = -1
            else:
                try:
                    env.location = int(optarg)
                except ValueError:
                    printErrorAndExit("Invalid location: \"%s\"\n" %
                                      _from_uc(optarg))
        elif opt == "--shelf":
            shelfLocation = _from_uc(optarg)
        elif opt in ("-t", "--type"):
            env.type = optarg
        elif opt in ("-v", "--verbose"):
            env.verbose = True
        elif opt in ("-V", "--version"):
            sys.stdout.write("crowbar\n")
            sys.exit(0)

    if len(args) == 0:
        printErrorAndExit(
            "No command given. See \"kofoto --help\" for help.\n")

    if not os.path.exists(configFilename):
        confdir = os.path.dirname(configFilename)
        if confdir and not os.path.exists(confdir):
            os.mkdir(confdir)
            sys.stdout.write("Created directory \"%s\".\n" % confdir)
        createConfigTemplate(configFilename)
        sys.stdout.write("Created configuration file \"%s\".\n" %
                         configFilename)
    try:
        conf = Config(configFilename, CODESET)
        conf.read()
        genconf = conf.getGeneralConfig()
    except MissingSectionHeaderError, x:
        printErrorAndExit(
            "Bad configuration (missing section headers).\n" % x)
    except MissingConfigurationKeyError, x:
        printErrorAndExit(
            "Missing configuration key in general section: %s.\n" % x)

    if not shelfLocation and genconf.has_key("shelf_location"):
        shelfLocation = genconf["shelf_location"]
    if shelfLocation:
        shelfLocation = os.path.expanduser(shelfLocation)
    else:
        printErrorAndExit(
            ("Don't know which shelf to use; none defined in %s and no\n" +
             "--shelf parameter given.\n") % configFilename)

    if args[0] == "create-shelf":
        try:
            Shelf(shelfLocation, CODESET, create=True)
        except FailedWritingError, filename:
            printErrorAndExit(
                "Could not create shelf file %s (already exists?).\n" %
                filename)
        sys.stdout.write("Created shelf \"%s\".\n" % shelfLocation)
        sys.exit(0)

    if not commandTable.has_key(args[0]):
        printErrorAndExit(
            "Unknown command \"%s\". See \"kofoto --help\" for help.\n" %
            args[0])

    try:
        shelf = Shelf(shelfLocation, CODESET)
    except ShelfNotFoundError, x:
        printErrorAndExit(
            "Could not open shelf \"%s\".\n" % shelfLocation +
            "You can create a new one by running " +
            "\"kofoto create-shelf\"\n")
    except ShelfLockedError, x:
        printErrorAndExit(
            "Could not open shelf \"%s\".\n" % shelfLocation +
            "Another process is locking it.\n")
    shelf.begin()
    try:
        env.codeset = CODESET
        env.gencharenc = genCharEnc
        env.out = printOutput
        env.err = printError
        env.errexit = printErrorAndExit
        env.shelf = shelf
        env.imagecache = ImageCache(genconf["imagecache_location"])
        env.thumbnailsize = genconf["thumbnail_image_size"]
        env.defaultsize = genconf["default_image_size"]
        env.imagesizes = genconf["image_sizes"]

        commandTable[args[0]](env, args[1:])
        shelf.commit()
        sys.exit(0)
    except ArgumentError:
        printErrorAndExit(
            "Bad arguments to command. See \"kofoto --help\" for help.\n")
    except UndeletableAlbumError, x:
        printError("Undeletable album: \"%s\".\n" % x)
    except ReservedAlbumTagError, x:
        printError("Reserved album tag: \"%s\".\n" % x)
    except AlbumExistsError, x:
        printError("Album already exists: \"%s\".\n" % x)
    except ImageDoesNotExistError, x:
        printError("Image does not exist: \"%s\".\n" % x)
    except AlbumDoesNotExistError, x:
        printError("Album does not exist: \"%s\".\n" % x)
    except ObjectDoesNotExistError, x:
        printError("Object does not exist: \"%s\".\n" % x)
    except UnknownAlbumTypeError, x:
        printError("Unknown album type: \"%s\".\n" % x)
    except UnsettableChildrenError, x:
        printError("Cannot add children to \"%s\" (children are created virtually).\n" % x)
    except CategoryExistsError, x:
        printError("Category already exists: \"%s\".\n" % x)
    except CategoryDoesNotExistError, x:
        printError("Category does not exist: \"%s\".\n" % x)
    except ReservedCategoryTagError, x:
        printError("Reserved category tag: %s.\n" % x)
    except CategoryPresentError, x:
        printError("Object %s is already associated with category %s.\n" % (x[0], x[1]))
    except CategoriesAlreadyConnectedError, x:
        printError("Categories %s and %s are already connected.\n" % (x[0], x[1]))
    except CategoryLoopError, x:
        printError("Connecting %s to %s would make a loop in the categories.\n" % (x[0], x[1]))
    except SearchExpressionParseError, x:
        printError("Error while parsing search expression: %s.\n" % x)
    except KeyboardInterrupt:
        printOutput("Interrupted.\n")
    shelf.rollback()
    sys.exit(1)


######################################################################
### Main.

if __name__ == "__main__":
    main(sys.argv)
