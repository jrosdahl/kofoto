import os
import time
from kofoto.common import symlinkOrCopyFile

class OutputEngine:
    def __init__(self, env):
        self.env = env
        self.imagesdest = "images"
        self.blurb = 'Generated by <a href="http://svn.rosdahl.net/svn/kofoto/" target="_top">Kofoto</a> %s.' % time.strftime("%Y-%m-%d %H:%M:%S")


    def getImageReference(self, image, size):
        return self.imgref[(image.getHash(), size)]


    def writeFile(self, filename, text):
        open(os.path.join(self.dest, filename), "w").write(text)


    def symlinkFile(self, source, destination):
        symlinkOrCopyFile(source, os.path.join(self.dest, destination))


    def generate(self, root, dest):
        self.dest = dest
        self.imgref = {}

        try:
            os.mkdir(self.dest)
        except OSError:
            pass
        try:
            os.mkdir(os.path.join(self.dest, self.imagesdest))
        except OSError:
            pass

        albummap = {}
        _findAlbumPaths(root, [], albummap)
        while 1:
            if len(albummap) == 0:
                break
            tag, paths = albummap.popitem()
            self._generateAlbumHelper(self.env.shelf.getAlbum(tag), paths)
        if self.env.verbose:
            self.env.out("Generating index page...\n")
        self.generateIndex(root)


    def _generateAlbumHelper(self, album, paths):
        if self.env.verbose:
            self.env.out("Generating album page for %s...\n" % album.getTag())

        # Design choice: This output engine sorts subalbums before
        # images.
        children = album.getChildren()
        albumchildren = [x for x in children if x.isAlbum()]
        imagechildren = [x for x in children if not x.isAlbum()]

        #
        # Generate and remember different sizes for images in the album.
        #
        for child in imagechildren:
            if self.env.verbose:
                self.env.out("Generating image %s..." % (child.getId()))
            for size in [self.env.thumbnailsize] + self.env.imagesizes:
                if self.env.verbose:
                    self.env.out(" %s" % size)
                imgabsloc = self.env.imagecache.get(child, size)
                imgloc = os.path.join(
                    self.dest,
                    self.imagesdest,
                    os.path.basename(imgabsloc))
                if not os.path.isfile(imgloc):
                    symlinkOrCopyFile(imgabsloc, imgloc)
                self.imgref[(child.getHash(), size)] = "%s/%s" % (
                    self.imagesdest,
                    os.path.basename(imgabsloc))
            if self.env.verbose:
                self.env.out("\n")

        self.generateAlbum(
            album, albumchildren, imagechildren, paths)

        for ix in range(len(imagechildren)):
            child = imagechildren[ix]
            if self.env.verbose:
                self.env.out(
                    "Generating image page for %s in album %s...\n" % (
                        child.getId(),
                        album.getTag()))
            self.generateImage(album, child, imagechildren, ix, paths)


######################################################################

def _findAlbumPaths(album, path, albummap):
    if album.getTag() in [x.getTag() for x in path]:
        # Already visited album, so break recursion here.
        return
    path = path[:] + [album]
    tag = album.getTag()
    if not albummap.has_key(tag):
        albummap[tag] = []
    albummap[tag].append(path)
    for child in album.getChildren():
        if child.isAlbum():
            _findAlbumPaths(child, path, albummap)
